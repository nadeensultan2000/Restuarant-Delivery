{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet AuthService = class AuthService {\n  LoginService(Model) {\n    return this.http.post(`${this.apiurl}login`, Model);\n  }\n  RegiterService(Model) {\n    return this.http.post(`${this.apiurl}Register`, Model);\n  }\n  logout() {}\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.apiurl = 'https://localhost:44329/api/User/';\n  }\n  isAuthenticated() {\n    if (sessionStorage.getItem('token') !== null) {\n      return true;\n    }\n    return false;\n  }\n  canAccess() {\n    if (!this.isAuthenticated()) {\n      //redirect to login\n      this.router.navigate(['/login']);\n    }\n  }\n  canAuthenticate() {\n    if (this.isAuthenticated()) {\n      //redirect to dashboard\n      this.router.navigate(['/dashboard']);\n    }\n  }\n  register(name, email, password) {\n    //send data to register api (firebase)\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=[API_KEY]', {\n      displayName: name,\n      email,\n      password\n    });\n  }\n  storeToken(token) {\n    sessionStorage.setItem('token', token);\n  }\n  login(email, password) {\n    //send data to login api (firebase)\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=[API_KEY]', {\n      email,\n      password\n    });\n  }\n  detail() {\n    let token = sessionStorage.getItem('token');\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=[API_KEY]', {\n      idToken: token\n    });\n  }\n  removeToken() {\n    sessionStorage.removeItem('token');\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"mappings":";AACA,SAASA,UAAU,QAAQ,eAAe;AAOnC,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAGtBC,YAAY,CAACC,KAAS;IACpB,OAAO,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,OAAO,EAAEH,KAAK,CAAC;EACrD;EACAI,cAAc,CAACJ,KAAS;IACtB,OAAO,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,UAAU,EAAEH,KAAK,CAAC;EACxD;EACAK,MAAM,IAGP;EAGCC,YAAoBC,MAAa,EAASN,IAAe;IAArC,WAAM,GAANM,MAAM;IAAgB,SAAI,GAAJN,IAAI;IAd9C,WAAM,GAAC,mCAAmC;EAcmB;EAE7DO,eAAe;IACb,IAAIC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,KAAG,IAAI,EAAE;MACxC,OAAO,IAAI;;IAEf,OAAO,KAAK;EACd;EAEAC,SAAS;IACP,IAAI,CAAC,IAAI,CAACH,eAAe,EAAE,EAAE;MACzB;MACA,IAAI,CAACD,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEtC;EACAC,eAAe;IACb,IAAI,IAAI,CAACL,eAAe,EAAE,EAAE;MAC1B;MACA,IAAI,CAACD,MAAM,CAACK,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;EAExC;EAEAE,QAAQ,CAACC,IAAW,EAACC,KAAY,EAACC,QAAe;IAC7C;IACD,OAAO,IAAI,CAAChB,IAAI,CACdC,IAAI,CACH,yEAAyE,EACvE;MAACgB,WAAW,EAACH,IAAI;MAACC,KAAK;MAACC;IAAQ,CAAC,CACpC;EACL;EAEAE,UAAU,CAACC,KAAY;IACnBX,cAAc,CAACY,OAAO,CAAC,OAAO,EAACD,KAAK,CAAC;EACzC;EAEAE,KAAK,CAACN,KAAY,EAACC,QAAe;IAChC;IACE,OAAO,IAAI,CAAChB,IAAI,CACfC,IAAI,CACD,qFAAqF,EACnF;MAACc,KAAK;MAACC;IAAQ,CAAC,CACrB;EACL;EAEAM,MAAM;IACJ,IAAIH,KAAK,GAAGX,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,OAAO,IAAI,CAACT,IAAI,CAACC,IAAI,CACjB,yEAAyE,EACzE;MAACsB,OAAO,EAACJ;IAAK,CAAC,CAClB;EACH;EAEAK,WAAW;IACThB,cAAc,CAACiB,UAAU,CAAC,OAAO,CAAC;EACpC;CAID;AA1EY5B,WAAW,eAHvBD,UAAU,CAAC;EACV8B,UAAU,EAAE;CACb,CAAC,GACW7B,WAAW,CA0EvB;SA1EYA,WAAW","names":["Injectable","AuthService","LoginService","Model","http","post","apiurl","RegiterService","logout","constructor","router","isAuthenticated","sessionStorage","getItem","canAccess","navigate","canAuthenticate","register","name","email","password","displayName","storeToken","token","setItem","login","detail","idToken","removeToken","removeItem","providedIn"],"sourceRoot":"","sources":["C:\\Rrestaurant Delivery\\restaurant-delivery\\src\\app\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  apiurl='https://localhost:44329/api/User/';\n\n  LoginService(Model:any){\n    return this.http.post(`${this.apiurl}login`, Model);\n  }\n  RegiterService(Model:any){\n    return this.http.post(`${this.apiurl}Register`, Model);\n  }\n  logout()\n {\n\n }\n \n\n  constructor(private router:Router,private http:HttpClient) { }\n\n  isAuthenticated():boolean{\n    if (sessionStorage.getItem('token')!==null) {\n        return true;\n    }\n    return false;\n  }\n\n  canAccess(){\n    if (!this.isAuthenticated()) {\n        //redirect to login\n        this.router.navigate(['/login']);\n    }\n  }\n  canAuthenticate(){\n    if (this.isAuthenticated()) {\n      //redirect to dashboard\n      this.router.navigate(['/dashboard']);\n    }\n  }\n\n  register(name:string,email:string,password:string){\n      //send data to register api (firebase)\n     return this.http\n      .post<{idToken:string}>(\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=[API_KEY]',\n          {displayName:name,email,password}\n      );\n  }\n\n  storeToken(token:string){\n      sessionStorage.setItem('token',token);\n  }\n\n  login(email:string,password:string){\n    //send data to login api (firebase)\n      return this.http\n      .post<{idToken:string}>(\n          'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=[API_KEY]',\n            {email,password}\n      );\n  }\n\n  detail(){\n    let token = sessionStorage.getItem('token');\n\n    return this.http.post<{users:Array<{localId:string,displayName:string}>}>(\n        'https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=[API_KEY]',\n        {idToken:token}\n    );\n  }\n\n  removeToken(){\n    sessionStorage.removeItem('token');\n  }\n\n\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}